/**
 * Telemetry API
 * The telemetry API allows you to send realtime telemetry of your aircrafts into your IDRONECT account. It will help you to log your flights and allow you to automate your maintenance folow-up.
 *
 * The version of the OpenAPI document: TEL-1.2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TelemetryApi);
  }
}(this, function(expect, TelemetryApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TelemetryApi.Point();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Point', function() {
    it('should create an instance of Point', function() {
      // uncomment below and update the code to test Point
      //var instane = new TelemetryApi.Point();
      //expect(instance).to.be.a(TelemetryApi.Point);
    });

    it('should have the property lat (base name: "lat")', function() {
      // uncomment below and update the code to test the property lat
      //var instance = new TelemetryApi.Point();
      //expect(instance).to.be();
    });

    it('should have the property lng (base name: "lng")', function() {
      // uncomment below and update the code to test the property lng
      //var instance = new TelemetryApi.Point();
      //expect(instance).to.be();
    });

    it('should have the property alt (base name: "alt")', function() {
      // uncomment below and update the code to test the property alt
      //var instance = new TelemetryApi.Point();
      //expect(instance).to.be();
    });

    it('should have the property aSpeed (base name: "aSpeed")', function() {
      // uncomment below and update the code to test the property aSpeed
      //var instance = new TelemetryApi.Point();
      //expect(instance).to.be();
    });

    it('should have the property gSpeed (base name: "gSpeed")', function() {
      // uncomment below and update the code to test the property gSpeed
      //var instance = new TelemetryApi.Point();
      //expect(instance).to.be();
    });

    it('should have the property ySpeed (base name: "ySpeed")', function() {
      // uncomment below and update the code to test the property ySpeed
      //var instance = new TelemetryApi.Point();
      //expect(instance).to.be();
    });

    it('should have the property sats (base name: "sats")', function() {
      // uncomment below and update the code to test the property sats
      //var instance = new TelemetryApi.Point();
      //expect(instance).to.be();
    });

    it('should have the property time (base name: "time")', function() {
      // uncomment below and update the code to test the property time
      //var instance = new TelemetryApi.Point();
      //expect(instance).to.be();
    });

    it('should have the property yaw (base name: "yaw")', function() {
      // uncomment below and update the code to test the property yaw
      //var instance = new TelemetryApi.Point();
      //expect(instance).to.be();
    });

    it('should have the property pitch (base name: "pitch")', function() {
      // uncomment below and update the code to test the property pitch
      //var instance = new TelemetryApi.Point();
      //expect(instance).to.be();
    });

    it('should have the property roll (base name: "roll")', function() {
      // uncomment below and update the code to test the property roll
      //var instance = new TelemetryApi.Point();
      //expect(instance).to.be();
    });

    it('should have the property bearing (base name: "bearing")', function() {
      // uncomment below and update the code to test the property bearing
      //var instance = new TelemetryApi.Point();
      //expect(instance).to.be();
    });

    it('should have the property batt (base name: "batt")', function() {
      // uncomment below and update the code to test the property batt
      //var instance = new TelemetryApi.Point();
      //expect(instance).to.be();
    });

    it('should have the property hAcc (base name: "hAcc")', function() {
      // uncomment below and update the code to test the property hAcc
      //var instance = new TelemetryApi.Point();
      //expect(instance).to.be();
    });

    it('should have the property vAcc (base name: "vAcc")', function() {
      // uncomment below and update the code to test the property vAcc
      //var instance = new TelemetryApi.Point();
      //expect(instance).to.be();
    });

    it('should have the property temp (base name: "temp")', function() {
      // uncomment below and update the code to test the property temp
      //var instance = new TelemetryApi.Point();
      //expect(instance).to.be();
    });

    it('should have the property volt (base name: "volt")', function() {
      // uncomment below and update the code to test the property volt
      //var instance = new TelemetryApi.Point();
      //expect(instance).to.be();
    });

    it('should have the property metadata (base name: "metadata")', function() {
      // uncomment below and update the code to test the property metadata
      //var instance = new TelemetryApi.Point();
      //expect(instance).to.be();
    });

  });

}));
