/**
 * Telemetry API
 * The telemetry API allows you to send realtime telemetry of your aircrafts into your IDRONECT account. It will help you to log your flights and allow you to automate your maintenance folow-up.
 *
 * The version of the OpenAPI document: TEL-1.2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DataBody from '../model/DataBody';
import DataResponse from '../model/DataResponse';
import GenericError from '../model/GenericError';
import ListResponse from '../model/ListResponse';
import StartBody from '../model/StartBody';
import StartReponse from '../model/StartReponse';
import StopBody from '../model/StopBody';
import StopReponse from '../model/StopReponse';
import TelemetryResponse from '../model/TelemetryResponse';

/**
* Telemetry service.
* @module api/TelemetryApi
* @version TEL-1.2.5
*/
export default class TelemetryApi {

    /**
    * Constructs a new TelemetryApi. 
    * @alias module:api/TelemetryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the telemetryDataPost operation.
     * @callback module:api/TelemetryApi~telemetryDataPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new data point to an ongoing telemetry recording
     * @param {Object} opts Optional parameters
     * @param {module:model/DataBody} opts.body null
     * @param {module:api/TelemetryApi~telemetryDataPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataResponse}
     */
    telemetryDataPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['SECRET'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DataResponse;
      return this.apiClient.callApi(
        '/telemetry/data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the telemetryListGet operation.
     * @callback module:api/TelemetryApi~telemetryListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all activte telemetries
     * @param {module:api/TelemetryApi~telemetryListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResponse}
     */
    telemetryListGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['SECRET'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListResponse;
      return this.apiClient.callApi(
        '/telemetry/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the telemetryStartPost operation.
     * @callback module:api/TelemetryApi~telemetryStartPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartReponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a new telemetry recording
     * @param {Object} opts Optional parameters
     * @param {module:model/StartBody} opts.body aircraftId or trackerId is required, not both
     * @param {module:api/TelemetryApi~telemetryStartPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartReponse}
     */
    telemetryStartPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['SECRET'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartReponse;
      return this.apiClient.callApi(
        '/telemetry/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the telemetryStopPost operation.
     * @callback module:api/TelemetryApi~telemetryStopPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopReponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops an ongoing telemetry
     * @param {Object} opts Optional parameters
     * @param {module:model/StopBody} opts.body null
     * @param {module:api/TelemetryApi~telemetryStopPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopReponse}
     */
    telemetryStopPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['SECRET'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StopReponse;
      return this.apiClient.callApi(
        '/telemetry/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the telemetryTelemetryIdGet operation.
     * @callback module:api/TelemetryApi~telemetryTelemetryIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TelemetryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get data about a specific telemetry
     * @param {String} telemetryId Telemetry id to fetch
     * @param {module:api/TelemetryApi~telemetryTelemetryIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TelemetryResponse}
     */
    telemetryTelemetryIdGet(telemetryId, callback) {
      let postBody = null;
      // verify the required parameter 'telemetryId' is set
      if (telemetryId === undefined || telemetryId === null) {
        throw new Error("Missing the required parameter 'telemetryId' when calling telemetryTelemetryIdGet");
      }

      let pathParams = {
        'telemetryId': telemetryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['SECRET'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TelemetryResponse;
      return this.apiClient.callApi(
        '/telemetry/{telemetryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
