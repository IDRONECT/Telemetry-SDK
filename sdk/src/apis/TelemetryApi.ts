/* tslint:disable */
/* eslint-disable */
/**
 * Telemetry API
 * The telemetry API allows you to send realtime telemetry of your aircrafts into your IDRONECT account. It will help you to log your flights and allow you to automate your maintenance folow-up.
 *
 * The version of the OpenAPI document: TEL-1.2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DataBody,
    DataBodyFromJSON,
    DataBodyToJSON,
    DataResponse,
    DataResponseFromJSON,
    DataResponseToJSON,
    GenericError,
    GenericErrorFromJSON,
    GenericErrorToJSON,
    ListResponse,
    ListResponseFromJSON,
    ListResponseToJSON,
    StartBody,
    StartBodyFromJSON,
    StartBodyToJSON,
    StartReponse,
    StartReponseFromJSON,
    StartReponseToJSON,
    StopBody,
    StopBodyFromJSON,
    StopBodyToJSON,
    StopReponse,
    StopReponseFromJSON,
    StopReponseToJSON,
    TelemetryResponse,
    TelemetryResponseFromJSON,
    TelemetryResponseToJSON,
} from '../models';

export interface TelemetryDataPostRequest {
    body?: DataBody;
}

export interface TelemetryStartPostRequest {
    body?: StartBody;
}

export interface TelemetryStopPostRequest {
    body?: StopBody;
}

export interface TelemetryTelemetryIdGetRequest {
    telemetryId: string;
}

/**
 * 
 */
export class TelemetryApi extends runtime.BaseAPI {

    /**
     * Add a new data point to an ongoing telemetry recording
     */
    async telemetryDataPostRaw(requestParameters: TelemetryDataPostRequest): Promise<runtime.ApiResponse<DataResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // SECRET authentication
        }

        const response = await this.request({
            path: `/telemetry/data`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DataBodyToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DataResponseFromJSON(jsonValue));
    }

    /**
     * Add a new data point to an ongoing telemetry recording
     */
    async telemetryDataPost(requestParameters: TelemetryDataPostRequest): Promise<DataResponse> {
        const response = await this.telemetryDataPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all activte telemetries
     */
    async telemetryListGetRaw(): Promise<runtime.ApiResponse<ListResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // SECRET authentication
        }

        const response = await this.request({
            path: `/telemetry/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResponseFromJSON(jsonValue));
    }

    /**
     * List all activte telemetries
     */
    async telemetryListGet(): Promise<ListResponse> {
        const response = await this.telemetryListGetRaw();
        return await response.value();
    }

    /**
     * Start a new telemetry recording
     */
    async telemetryStartPostRaw(requestParameters: TelemetryStartPostRequest): Promise<runtime.ApiResponse<StartReponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // SECRET authentication
        }

        const response = await this.request({
            path: `/telemetry/start`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StartBodyToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StartReponseFromJSON(jsonValue));
    }

    /**
     * Start a new telemetry recording
     */
    async telemetryStartPost(requestParameters: TelemetryStartPostRequest): Promise<StartReponse> {
        const response = await this.telemetryStartPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Stops an ongoing telemetry
     */
    async telemetryStopPostRaw(requestParameters: TelemetryStopPostRequest): Promise<runtime.ApiResponse<StopReponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // SECRET authentication
        }

        const response = await this.request({
            path: `/telemetry/stop`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StopBodyToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StopReponseFromJSON(jsonValue));
    }

    /**
     * Stops an ongoing telemetry
     */
    async telemetryStopPost(requestParameters: TelemetryStopPostRequest): Promise<StopReponse> {
        const response = await this.telemetryStopPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get data about a specific telemetry
     */
    async telemetryTelemetryIdGetRaw(requestParameters: TelemetryTelemetryIdGetRequest): Promise<runtime.ApiResponse<TelemetryResponse>> {
        if (requestParameters.telemetryId === null || requestParameters.telemetryId === undefined) {
            throw new runtime.RequiredError('telemetryId','Required parameter requestParameters.telemetryId was null or undefined when calling telemetryTelemetryIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // SECRET authentication
        }

        const response = await this.request({
            path: `/telemetry/{telemetryId}`.replace(`{${"telemetryId"}}`, encodeURIComponent(String(requestParameters.telemetryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TelemetryResponseFromJSON(jsonValue));
    }

    /**
     * Get data about a specific telemetry
     */
    async telemetryTelemetryIdGet(requestParameters: TelemetryTelemetryIdGetRequest): Promise<TelemetryResponse> {
        const response = await this.telemetryTelemetryIdGetRaw(requestParameters);
        return await response.value();
    }

}
