/**
 * Telemetry API
 * The telemetry API allows you to send realtime telemetry of your aircrafts into your IDRONECT account. It will help you to log your flights and allow you to automate your maintenance folow-up.
 *
 * The version of the OpenAPI document: TEL-1.2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Point model module.
 * @module model/Point
 * @version TEL-1.2.5
 */
class Point {
    /**
     * Constructs a new <code>Point</code>.
     * @alias module:model/Point
     * @param lat {Number} Latitude in floating decimals (e.g. 51.04433141367766)
     * @param lng {Number} Longitude in floating decimals (e.g. 3.7520202689333257)
     * @param alt {Number} WGS84 height
     */
    constructor(lat, lng, alt) { 
        
        Point.initialize(this, lat, lng, alt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, lat, lng, alt) { 
        obj['lat'] = lat;
        obj['lng'] = lng;
        obj['alt'] = alt;
    }

    /**
     * Constructs a <code>Point</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Point} obj Optional instance to populate.
     * @return {module:model/Point} The populated <code>Point</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Point();

            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('lng')) {
                obj['lng'] = ApiClient.convertToType(data['lng'], 'Number');
            }
            if (data.hasOwnProperty('alt')) {
                obj['alt'] = ApiClient.convertToType(data['alt'], 'Number');
            }
            if (data.hasOwnProperty('aSpeed')) {
                obj['aSpeed'] = ApiClient.convertToType(data['aSpeed'], 'Number');
            }
            if (data.hasOwnProperty('gSpeed')) {
                obj['gSpeed'] = ApiClient.convertToType(data['gSpeed'], 'Number');
            }
            if (data.hasOwnProperty('ySpeed')) {
                obj['ySpeed'] = ApiClient.convertToType(data['ySpeed'], 'Number');
            }
            if (data.hasOwnProperty('sats')) {
                obj['sats'] = ApiClient.convertToType(data['sats'], 'Number');
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], 'Number');
            }
            if (data.hasOwnProperty('yaw')) {
                obj['yaw'] = ApiClient.convertToType(data['yaw'], 'Number');
            }
            if (data.hasOwnProperty('pitch')) {
                obj['pitch'] = ApiClient.convertToType(data['pitch'], 'Number');
            }
            if (data.hasOwnProperty('roll')) {
                obj['roll'] = ApiClient.convertToType(data['roll'], 'Number');
            }
            if (data.hasOwnProperty('bearing')) {
                obj['bearing'] = ApiClient.convertToType(data['bearing'], 'Number');
            }
            if (data.hasOwnProperty('batt')) {
                obj['batt'] = ApiClient.convertToType(data['batt'], 'Number');
            }
            if (data.hasOwnProperty('hAcc')) {
                obj['hAcc'] = ApiClient.convertToType(data['hAcc'], 'Number');
            }
            if (data.hasOwnProperty('vAcc')) {
                obj['vAcc'] = ApiClient.convertToType(data['vAcc'], 'Number');
            }
            if (data.hasOwnProperty('temp')) {
                obj['temp'] = ApiClient.convertToType(data['temp'], 'Number');
            }
            if (data.hasOwnProperty('volt')) {
                obj['volt'] = ApiClient.convertToType(data['volt'], 'Number');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
        }
        return obj;
    }


}

/**
 * Latitude in floating decimals (e.g. 51.04433141367766)
 * @member {Number} lat
 */
Point.prototype['lat'] = undefined;

/**
 * Longitude in floating decimals (e.g. 3.7520202689333257)
 * @member {Number} lng
 */
Point.prototype['lng'] = undefined;

/**
 * WGS84 height
 * @member {Number} alt
 */
Point.prototype['alt'] = undefined;

/**
 * Airspeed in m/s
 * @member {Number} aSpeed
 */
Point.prototype['aSpeed'] = undefined;

/**
 * GroupSpeed in m/s
 * @member {Number} gSpeed
 */
Point.prototype['gSpeed'] = undefined;

/**
 * Vertical (climb/descent) in m/s. Value should be negative for descent
 * @member {Number} ySpeed
 */
Point.prototype['ySpeed'] = undefined;

/**
 * Amount of satellites currently connected
 * @member {Number} sats
 */
Point.prototype['sats'] = undefined;

/**
 * Epoch timestamp in ms. If not provided the timestamp will be the time of arrival of the data on the server
 * @member {Number} time
 */
Point.prototype['time'] = undefined;

/**
 * Device yaw in degrees (-180 degrees <= yaw <= 180 degrees)
 * @member {Number} yaw
 */
Point.prototype['yaw'] = undefined;

/**
 * Device pitch in degrees (-90 degrees <= pitch <= 90 degrees)
 * @member {Number} pitch
 */
Point.prototype['pitch'] = undefined;

/**
 * Device roll in degrees (-180 degrees <= roll <= 180 degrees)
 * @member {Number} roll
 */
Point.prototype['roll'] = undefined;

/**
 * Bearing (0 degrees <= bearing <= 360 degrees)
 * @member {Number} bearing
 */
Point.prototype['bearing'] = undefined;

/**
 * Battery in % left
 * @member {Number} batt
 */
Point.prototype['batt'] = undefined;

/**
 * Horizontal accuracy of the device in meters
 * @member {Number} hAcc
 */
Point.prototype['hAcc'] = undefined;

/**
 * Vertical accuracy of the device in meters
 * @member {Number} vAcc
 */
Point.prototype['vAcc'] = undefined;

/**
 * Registered temperature in degrees Celcius of the battery or device in general
 * @member {Number} temp
 */
Point.prototype['temp'] = undefined;

/**
 * Current battery voltage of the battery/device
 * @member {Number} volt
 */
Point.prototype['volt'] = undefined;

/**
 * @member {Object} metadata
 */
Point.prototype['metadata'] = undefined;






export default Point;

