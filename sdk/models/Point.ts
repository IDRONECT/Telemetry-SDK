/**
 * Telemetry API
 * The telemetry API allows you to send realtime telemetry of your aircrafts into your IDRONECT account. It will help you to log your flights and allow you to automate your maintenance folow-up.
 *
 * OpenAPI spec version: TEL-1.2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

export class Point {
    /**
    * Latitude in floating decimals (e.g. 51.04433141367766)
    */
    'lat': number;
    /**
    * Longitude in floating decimals (e.g. 3.7520202689333257)
    */
    'lng': number;
    /**
    * WGS84 height
    */
    'alt': number;
    /**
    * Airspeed in m/s
    */
    'aSpeed'?: number;
    /**
    * GroupSpeed in m/s
    */
    'gSpeed'?: number;
    /**
    * Vertical (climb/descent) in m/s. Value should be negative for descent
    */
    'ySpeed'?: number;
    /**
    * Amount of satellites currently connected
    */
    'sats'?: number;
    /**
    * Epoch timestamp in ms. If not provided the timestamp will be the time of arrival of the data on the server
    */
    'time'?: number;
    /**
    * Device yaw in degrees (-180 degrees <= yaw <= 180 degrees)
    */
    'yaw'?: number;
    /**
    * Device pitch in degrees (-90 degrees <= pitch <= 90 degrees)
    */
    'pitch'?: number;
    /**
    * Device roll in degrees (-180 degrees <= roll <= 180 degrees)
    */
    'roll'?: number;
    /**
    * Bearing (0 degrees <= bearing <= 360 degrees)
    */
    'bearing'?: number;
    /**
    * Battery in % left
    */
    'batt'?: number;
    /**
    * Horizontal accuracy of the device in meters
    */
    'hAcc'?: number;
    /**
    * Vertical accuracy of the device in meters
    */
    'vAcc'?: number;
    /**
    * Registered temperature in degrees Celcius of the battery or device in general
    */
    'temp'?: number;
    /**
    * Current battery voltage of the battery/device
    */
    'volt'?: number;
    'metadata'?: any;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "lat",
            "baseName": "lat",
            "type": "number",
            "format": ""
        },
        {
            "name": "lng",
            "baseName": "lng",
            "type": "number",
            "format": ""
        },
        {
            "name": "alt",
            "baseName": "alt",
            "type": "number",
            "format": ""
        },
        {
            "name": "aSpeed",
            "baseName": "aSpeed",
            "type": "number",
            "format": ""
        },
        {
            "name": "gSpeed",
            "baseName": "gSpeed",
            "type": "number",
            "format": ""
        },
        {
            "name": "ySpeed",
            "baseName": "ySpeed",
            "type": "number",
            "format": ""
        },
        {
            "name": "sats",
            "baseName": "sats",
            "type": "number",
            "format": ""
        },
        {
            "name": "time",
            "baseName": "time",
            "type": "number",
            "format": ""
        },
        {
            "name": "yaw",
            "baseName": "yaw",
            "type": "number",
            "format": ""
        },
        {
            "name": "pitch",
            "baseName": "pitch",
            "type": "number",
            "format": ""
        },
        {
            "name": "roll",
            "baseName": "roll",
            "type": "number",
            "format": ""
        },
        {
            "name": "bearing",
            "baseName": "bearing",
            "type": "number",
            "format": ""
        },
        {
            "name": "batt",
            "baseName": "batt",
            "type": "number",
            "format": ""
        },
        {
            "name": "hAcc",
            "baseName": "hAcc",
            "type": "number",
            "format": ""
        },
        {
            "name": "vAcc",
            "baseName": "vAcc",
            "type": "number",
            "format": ""
        },
        {
            "name": "temp",
            "baseName": "temp",
            "type": "number",
            "format": ""
        },
        {
            "name": "volt",
            "baseName": "volt",
            "type": "number",
            "format": ""
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "any",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return Point.attributeTypeMap;
    }
    
    public constructor() {
    }
}

